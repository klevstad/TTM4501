
% Has not been implemented in CryptDB yet because of other priorities. CryptDB uses \cite{ope_cryptdb} for their OPE scheme. Random order-preserving injective function
% the hypergeometric (HG) and negative hypergeometric (NHG) probability distributions
% Uses a Hypergeometric Distribution.

% Lazy, so it is not need to generate the whole range, but rather just an element when necessary. Lazy generates in range a->b with respective inverse

%Popa et al. \cite{CryptDB_OPE_Encoding} introduces a scheme called \Gls{mOPE} where the main technique is mutable ciphertexts.
Mutability (or malleability) is a cryptographic property allowing the transformation of one ciphertext into another.
More formally, given a plaintext $m_1$, it is possible to transform it into a valid encryption $f(m_1)$ by using a valid function $f$ without further knowledge of $m_1$.

%
%\Gls{mOPE} uses a balanced binary tree for searching which contains encryptions of all the plaintext's values and a table of \Gls{ope_onion}
encodings where the encoded value of a ciphertext is its path from the root to the particular node in the binary tree. If $y$ is greater than $x$,
then $y$ will be located to the right of $x$ in the tree. It also uses an interactive protocol when inserting a value into the search tree,
where the server and the client plays a query game. The client asks for the encrypted root node,
decrypts it and determines whether the value to be inserted is smaller or larger than the root.
It replies to the server with a $0$ or $1$, making the server traverse the tree to the left or right and replying with the next encrypted node.
This little game continues until there are no child nodes. In order to avoid the tree being too deep,
\Gls{mOPE} uses a tree-balancing transformation summary which describes operations (most of them split-and-merge operations) that are completely done by the server.
%
%The balancing procedure ensures that the height of the tree is bounded by $\log(N)$, where $N$ is the number of encrypted values.
Because both client and server needs a shared understanding of the structure of the search tree, the client computes a Merkle hash of the root of the tree.
A Merkle tree is a tree where every parent node is labelled with the hash of all of its children's labels \cite{Merkle}. By performing the Merkle hash,
the client is able to check whether the server behaves maliciously or not
(Malicious in this setting would be if the server performed other operations than the client requested)
by comparing its own Merkle hash of the root with the one delivered by the server.
